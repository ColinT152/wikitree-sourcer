var consentSettings;//ga and aa used to tell client side to not send custom events. 

(function() {
    var consentKey = 'consentSettings';
    function getCookie(cname) {
        var cookie = document.cookie.split("; ").find(c => c.split("=")[0] === cname);
        return cookie ? cookie.split("=")[1] : "";
    }

    function isJsonString(str) {
        try {
            JSON.parse(str);
        } catch (e) {
            return false;
        }
        return true;
    }

    function setCookie(cname,cvalue,exdays,cpath)
    {
        var expires = "";
        var path = `path= ${(cpath && cpath.length > 0 ? cpath : "/")};`;
        var domain = `domain=${typeof ncom !== "undefined" ? ncom.cookieDomain.site : cookieDomain};`;
        if(exdays) {
            var d = new Date();
            d.setTime(d.getTime() + (exdays*24*60*60*1000));
            expires = `expires=${d.toUTCString()};`;
        }
        document.cookie = `${cname}=${cvalue};${expires}${path}${domain}SameSite=Lax;Secure;`;
    }

    function removeCookie(cname) {
        var expires = `expires=${new Date(0)};`;
        var path = "path=/;";
        var currentPath = `path=${location.pathname};`
        var domain = `domain=${typeof ncom !== "undefined" ? ncom.cookieDomain.site : cookieDomain};`;
        document.cookie = `${cname}=;${expires}${path}`;
        document.cookie = `${cname}=;${expires}${path}${domain}`;
        document.cookie = `${cname}=;${expires}${currentPath}${domain}`;
    }

    function isConsentedVendor(vendorConsents, vendor){
        return vendorConsents.consentedVendors.length > 0 && vendorConsents.consentedVendors.find(x=>x.name === vendor) !== undefined;
    }

    function sendNonGDPRPageviewEvent(){
        window.dataLayer = window.dataLayer || [];
        if(
            (typeof is_eea_country !== "undefined" && is_eea_country === false) ||
            (typeof ncom !== "undefined" && ncom.country.isEEA === false)
        ){
            dataLayer.push({
                event: 'non_gdpr_pageview'
            });
            console.log("sent non-gdpr-pageview event");
        }
    }

    function showGDPRPrivacyLink(){
        if(
            (typeof is_eea_country !== "undefined" && is_eea_country) ||
            (typeof ncom !== "undefined" && ncom.country.isEEA)
        ){
            try{
                document.getElementById("gdpr_link_display").style.display = "inline-block";
            } catch(err){}
        }
    }

    function allowAll(){
        consentSettings = {pref: true, ga: true, aa: true, facebook_login: true};
    }

    function preferencesCheck(vendorConsents, data) {
        if(data && data.gdprApplies){
            consentSettings = {};
            consentSettings.pref = isConsentedVendor(vendorConsents, "Ancestry");
            consentSettings.ga = isConsentedVendor(vendorConsents, "Google Analytics");
            consentSettings.aa = isConsentedVendor(vendorConsents, "Adobe Analytics");
            consentSettings.facebook_login = isConsentedVendor(vendorConsents, "Facebook Login");
            if(!consentSettings.pref){
                console.log("Preferrence cookies not enabled based on consent.")
            }
            setCookie(consentKey, JSON.stringify(consentSettings));
        }
        else {
            allowAll();
            setCookie(consentKey, JSON.stringify(consentSettings));
        }
    }

    function consentCheck(eventType) {
        var consentValue = getCookie(consentKey);
        if(!isJsonString(consentValue)) {
            if(eventType === "gdpr") {
                __tcfapi('getCustomVendorConsents', 2, function(vendorConsents,success) {
                    if(success){
                        //do something for success
                        console.log("getCustomVendorConsents succeeded.");
                        console.log(vendorConsents);
                        window.__tcfapi('getTCData',2,function(data,success) {
                            preferencesCheck(vendorConsents, data);
                        });
                    }
                    else{
                        console.log("getCustomVendorConsents failed.");
                    }
                });
            }
            else {
                allowAll();
            }
        }
        else {
            consentSettings = JSON.parse(consentValue);
        }
        if(eventType === "gdpr") {
            sendNonGDPRPageviewEvent();
            showGDPRPrivacyLink();
        }
    }

    window._sp_queue = [];
    window._sp_ = {
        config: {
            accountId: 1726,
            propertyHref: typeof ncom !== "undefined" ? ncom.paths.www : typeof fullPathMainSiteSecure !== "undefined" ? fullPathMainSiteSecure : "https://www.newspapers.com",
            baseEndpoint: 'https://cdn.privacy-mgmt.com',
            ccpa: { },
            gdpr: { },
            events: {
                onMessageChoiceSelect: function() {
                    console.log('[event] onMessageChoiceSelect', arguments);
                    removeCookie(consentKey);
                },
                onMessageReady: function() {
                    console.log('[event] onMessageReady', arguments);
                },
                onMessageChoiceError: function() {
                    console.log('[event] onMessageChoiceError', arguments);
                },
                onPrivacyManagerAction: function() {
                    console.log('[event] onPrivacyManagerAction', arguments);
                    removeCookie(consentKey);
                },
                onPMCancel: function() {
                    console.log('[event] onPMCancel', arguments);
                },
                onMessageReceiveData: function() {
                    console.log('[event] onMessageReceiveData', arguments);
                },
                onSPPMObjectReady: function() {
                    console.log('[event] onSPPMObjectReady', arguments);
                },
                onConsentReady: function (consentUUID, euconsent) {
                    console.log('[event] onConsentReady', arguments);
                    // Check whether the client requires gdpr consent
                    consentCheck(arguments[0]);            
                },
                onError: function() {
                    console.log('[event] onError', arguments);
                }
            }
        }
    };
}());
